{"version":3,"sources":["App.js","index.js"],"names":["Square","_ref","value","onSquareClick","React","createElement","className","onClick","Board","_ref2","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","winner","status","Fragment","Game","history","setHistory","useState","Array","fill","currentMove","setCurrentMove","ascending","setAscending","currentSquares","moves","map","move","description","key","nextHistory","length","reverse","lines","a","b","c","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.e6e1b32e.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from 'react';\n\nfunction Square({value, onSquareClick}) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({xIsNext, squares, onPlay}) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div> \n    </>\n  );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [ascending, setAscending] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove+1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length-1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return(\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay}/>\n        <span className=\"info-span\">You are at move #{currentMove}</span>\n      </div>\n      <div className=\"game-info\">\n        <button className=\"toggle-btn\" onClick={() => setAscending(!ascending)}>Reverse</button>\n        <ol>{!ascending ? moves : moves.reverse()}</ol>\n      </div>\n    </div>\n  )\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n","import React, { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./styles.css\";\n\nimport App from \"./App\";\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);"],"sourceRoot":""}